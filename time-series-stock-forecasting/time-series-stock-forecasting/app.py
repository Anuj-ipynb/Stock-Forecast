import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import json
import os

st.set_page_config(page_title="Stock Forecast Comparison", layout="wide")
st.title("ðŸ“Š Multi-Model Stock Forecast Dashboard")
st.markdown("This dashboard compares forecasts generated by various time series models for **Apple (AAPL)** stock prices.")

@st.cache_data
def load_data():
    df = pd.read_csv("data/AAPL_cleaned.csv", index_col=0)
    df.index = pd.to_datetime(df.index)
    return df

df = load_data()

st.subheader("ðŸ“ˆ Historical Close Prices")
st.line_chart(df['Close'])
st.markdown("---")
st.subheader("ðŸ§  Forecast Comparisons (LSTM, ARIMA, SARIMA, Prophet)")

model_images = {
    "LSTM": "images/lstm_forecast.png",
    "ARIMA": "images/arima_forecast.png",
    "SARIMA": "images/sarima_forecast.png",
    "Prophet": "images/prophet_forecast.png"
}

metric_files = {
    "LSTM": "metrics/lstm_metrics.json",
    "ARIMA": "metrics/arima_metrics.json",
    "SARIMA": "metrics/sarima_metrics.json",
    "Prophet": "metrics/prophet_metrics.json"
}

tab_names = ["LSTM", "ARIMA", "SARIMA", "Prophet"]
tabs = st.tabs([f"ðŸ“Š {name}" for name in tab_names])

for tab, model in zip(tabs, tab_names):
    with tab:
        st.markdown(f"### {model} Forecast")
        image_path = model_images.get(model)
        if os.path.exists(image_path):
            st.image(image_path, use_column_width=True)
        else:
            st.warning(f"{model} forecast plot not found.")
        metric_path = metric_files.get(model)
        if os.path.exists(metric_path):
            with open(metric_path, "r") as f:
                metrics = json.load(f)
            st.markdown("#### ðŸ“‰ Evaluation Metrics")
            col1, col2, col3 = st.columns(3)
            col1.metric("MAE", f"{metrics['MAE']:.2f}")
            col2.metric("RMSE", f"{metrics['RMSE']:.2f}")
            col3.metric("MAPE (%)", f"{metrics['MAPE']:.2f}")
        else:
            st.warning("Metrics not found.")

st.markdown("---")
st.subheader("ðŸ“¤ Upload Custom Forecast Image")
uploaded = st.file_uploader("Upload a forecast plot (PNG)", type=["png"])
if uploaded:
    st.image(uploaded, caption="Uploaded Forecast", use_column_width=True)
